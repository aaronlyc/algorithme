/*
dp: 动态规划（Dynamic Programming）是算法中一个重要的内容, 很多算法题都是基于动态规划的问题.
首先，动态规划问题的一般形式就是求最值, 比如说让你求最长递增子序列呀，最小编辑距离等等。
其次, 动态规划和分治法很像, 但是不完全是分治法, 动态规划的子问题有相互影响的关系, 属于一种决策问题;
求解动态规划的核心问题是穷举。因为要求最值，肯定要把所有可行的答案穷举出来，然后在其中找最值, 其实找到的状态转移方程就是穷举.
动态规划的特点:
	1. 重复子问题;
	2. 最优子结构;
	3. 状态转移方程;
其中重复子问题和最优子结构是动态规划的形式特征, 由此特征的最值问题一般都要想到dp求解;
状态转移方程是动态规划的核心, 找到状态转移方程就可以穷举所有的结果, 下面的工作无非就是用dp数组去除重复子问题而已;

获取状态转移方程的一般思路:
	明确base case --> 明确状态 --> 明确选择 --> 定义dp数组/函数的含义

此外: 如果问题特殊, 还可以把二维的dp数组压缩到一维, 更特殊时一维可以压缩到常数级别, 这叫做动态规划的状态压缩.
*/
package dp
